     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB = 4
     3 00000000                                 [FORMAT "WCOFF"]                                ; 目标文件生成模式
     4 00000000                                 [INSTRSET "i486p"]                              ; 使用486命令
     5 00000000                                 [BITS 32]                                       ; 32位机械语言
     6 00000000                                 
     7 00000000                                 
     8 00000000                                 ; 目标文件的信息
     9 00000000                                 [FILE "naskfunc.nas"]
    10 00000000                                 
    11 00000000                                             GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt          	; hlt,cli,sti,gtihlt指令
    12 00000000                                             GLOBAL	_io_in8, _io_in16, _io_in32						; 8 16 32位输入
    13 00000000                                             GLOBAL	_io_out8, _io_out16, _io_out32				; 8 16 32位输出
    14 00000000                                             GLOBAL	_io_load_eflags, _io_store_eflags
    15 00000000                                 			GLOBAL	_load_gdtr, _load_idtr
    16 00000000                                 			GLOBAL	_asm_inthandler20,_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    17 00000000                                 			GLOBAL	_load_cr0,_store_cr0
    18 00000000                                 			GLOBAL	_memtest_sub
    19 00000000                                 			EXTERN	_inthandler20, _inthandler21, _inthandler27, _inthandler2c
    20 00000000                                 
    21 00000000                                 ; 实际的函数
    22                                          [SECTION .text]
    23 00000000                                 
    24 00000000                                 _io_hlt:                            ; void io_hlt(void);
    25 00000000 F4                                      HLT                         ; 中断
    26 00000001 C3                                      RET                         ; return
    27 00000002                                 
    28 00000002                                 _io_cli:                            ; void io_cli(void);
    29 00000002 FA                                      CLI                         ; 中断清零
    30 00000003 C3                                      RET                         ; return
    31 00000004                                  
    32 00000004                                 _io_sti:                            ; void io_sti(void);
    33 00000004 FB                                      STI                         ; 中断设置
    34 00000005 C3                                      RET                         ; return
    35 00000006                                 
    36 00000006                                 _io_stihlt:							; void io_stihlt(void);
    37 00000006 FB                              		STI 						; 中断设置
    38 00000007 F4                              		HLT 						; 中断
    39 00000008 C3                              		RET 						; return
    40 00000009                                 
    41 00000009                                 _io_in8:							; int io_in8(int port);
    42 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    43 0000000D B8 00000000                     		MOV		EAX,0
    44 00000012 EC                              		IN 		AL,DX
    45 00000013 C3                              		RET
    46 00000014                                 
    47 00000014                                 _io_in16:							; int io_in16(int port);
    48 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    49 00000018 B8 00000000                     		MOV		EAX,0
    50 0000001D 66 ED                           		IN 		AX,DX
    51 0000001F C3                              		RET
    52 00000020                                 
    53 00000020                                 _io_in32:							; int io_in32(int port);
    54 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    55 00000024 ED                              		IN		EAX,DX
    56 00000025 C3                              		RET
    57 00000026                                 
    58 00000026                                 _io_out8:							; void io_out8(int port, int data);
    59 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    60 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]			; data
    61 0000002E EE                              		OUT 	DX,AL
    62 0000002F C3                              		RET
    63 00000030                                 
    64 00000030                                 _io_out16:							; void io_out16(int port, int data);
    65 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    66 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]			; data
    67 00000038 66 EF                           		OUT 	DX,AX
    68 0000003A C3                              		RET
    69 0000003B                                 
    70 0000003B                                 _io_out32:							; void io_out32(int port, int data);
    71 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]			; port
    72 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]			; data
    73 00000043 EF                              		OUT 	DX,EAX
    74 00000044 C3                              		RET
    75 00000045                                 
    76 00000045                                 _io_load_eflags:					; void io_load_eflags(void);
    77 00000045 9C                              		PUSHFD						; PUSH EFLAGS
    78 00000046 58                              		POP		EAX
    79 00000047 C3                              		RET
    80 00000048                                 
    81 00000048                                 _io_store_eflags:					; void io_store_eflags(int eflags);
    82 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    83 0000004C 50                              		PUSH 	EAX
    84 0000004D 9D                              		POPFD						; POP EFLAGS
    85 0000004E C3                              		RET
    86 0000004F                                 
    87 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    88 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    89 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    90 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    91 0000005E C3                              		RET
    92 0000005F                                 
    93 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    94 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    95 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    96 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    97 0000006E C3                              		RET
    98 0000006F                                 
    99 0000006F                                 _asm_inthandler20:
   100 0000006F 06                              		PUSH	ES
   101 00000070 1E                              		PUSH	DS
   102 00000071 60                              		PUSHAD
   103 00000072 89 E0                           		MOV		EAX,ESP
   104 00000074 50                              		PUSH	EAX
   105 00000075 66 8C D0                        		MOV		AX,SS
   106 00000078 8E D8                           		MOV		DS,AX
   107 0000007A 8E C0                           		MOV		ES,AX
   108 0000007C E8 [00000000]                   		CALL	_inthandler20
   109 00000081 58                              		POP		EAX
   110 00000082 61                              		POPAD
   111 00000083 1F                              		POP		DS
   112 00000084 07                              		POP		ES
   113 00000085 CF                              		IRETD
   114 00000086                                 
   115 00000086                                 
   116 00000086                                 _asm_inthandler21:
   117 00000086 06                              		PUSH	ES
   118 00000087 1E                              		PUSH	DS
   119 00000088 60                              		PUSHAD
   120 00000089 89 E0                           		MOV		EAX,ESP
   121 0000008B 50                              		PUSH	EAX
   122 0000008C 66 8C D0                        		MOV		AX,SS
   123 0000008F 8E D8                           		MOV		DS,AX
   124 00000091 8E C0                           		MOV		ES,AX
   125 00000093 E8 [00000000]                   		CALL	_inthandler21
   126 00000098 58                              		POP		EAX
   127 00000099 61                              		POPAD
   128 0000009A 1F                              		POP		DS
   129 0000009B 07                              		POP		ES
   130 0000009C CF                              		IRETD
   131 0000009D                                 
   132 0000009D                                 _asm_inthandler27:
   133 0000009D 06                              		PUSH	ES
   134 0000009E 1E                              		PUSH	DS
   135 0000009F 60                              		PUSHAD
   136 000000A0 89 E0                           		MOV		EAX,ESP
   137 000000A2 50                              		PUSH	EAX
   138 000000A3 66 8C D0                        		MOV		AX,SS
   139 000000A6 8E D8                           		MOV		DS,AX
   140 000000A8 8E C0                           		MOV		ES,AX
   141 000000AA E8 [00000000]                   		CALL	_inthandler27
   142 000000AF 58                              		POP		EAX
   143 000000B0 61                              		POPAD
   144 000000B1 1F                              		POP		DS
   145 000000B2 07                              		POP		ES
   146 000000B3 CF                              		IRETD
   147 000000B4                                 
   148 000000B4                                 _asm_inthandler2c:
   149 000000B4 06                              		PUSH	ES
   150 000000B5 1E                              		PUSH	DS
   151 000000B6 60                              		PUSHAD
   152 000000B7 89 E0                           		MOV		EAX,ESP
   153 000000B9 50                              		PUSH	EAX
   154 000000BA 66 8C D0                        		MOV		AX,SS
   155 000000BD 8E D8                           		MOV		DS,AX
   156 000000BF 8E C0                           		MOV		ES,AX
   157 000000C1 E8 [00000000]                   		CALL	_inthandler2c
   158 000000C6 58                              		POP		EAX
   159 000000C7 61                              		POPAD
   160 000000C8 1F                              		POP		DS
   161 000000C9 07                              		POP		ES
   162 000000CA CF                              		IRETD
   163 000000CB                                 
   164 000000CB                                 _load_cr0:		;int load_cr0(void);
   165 000000CB 0F 20 C0                        		MOV		EAX,CR0
   166 000000CE C3                              		RET
   167 000000CF                                 		
   168 000000CF                                 _store_cr0:		;void store_cr0(int cr0);
   169 000000CF 8B 44 24 04                     		MOV		EAX,[ESP+4]
   170 000000D3 0F 22 C0                        		MOV		CR0,EAX
   171 000000D6 C3                              		RET
   172 000000D7                                 
   173 000000D7                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end);
   174 000000D7 57                              		PUSH 	EDI
   175 000000D8 56                              		PUSH 	ESI
   176 000000D9 53                              		PUSH 	EBX
   177 000000DA BE AA55AA55                     		MOV		ESI,0xaa55aa55
   178 000000DF BF 55AA55AA                     		MOV		EDI,0x55aa55aa
   179 000000E4 8B 44 24 10                     		MOV		EAX,[ESP+12+4]
   180 000000E8                                 
   181 000000E8                                 mts_loop:
   182 000000E8 89 C3                           		MOV		EBX,EAX
   183 000000EA 81 C3 00000FFC                  		ADD 	EBX,0xffc
   184 000000F0 8B 13                           		MOV		EDX,[EBX]
   185 000000F2 89 33                           		MOV		[EBX],ESI
   186 000000F4 83 33 FF                        		XOR		DWORD [EBX],0xffffffff
   187 000000F7 3B 3B                           		CMP		EDI,[EBX]
   188 000000F9 75 18                           		JNE		mts_fin
   189 000000FB 83 33 FF                        		XOR		DWORD [EBX],0xffffffff
   190 000000FE 3B 33                           		CMP		ESI,[EBX]
   191 00000100 75 11                           		JNE		mts_fin
   192 00000102 89 13                           		MOV		[EBX],EDX
   193 00000104 05 00001000                     		ADD 	EAX,0x1000
   194 00000109 3B 44 24 14                     		CMP		EAX,[ESP+12+8]
   195 0000010D 76 D9                           		JBE		mts_loop
   196 0000010F 5B                              		POP 	EBX
   197 00000110 5E                              		POP 	ESI
   198 00000111 5F                              		POP 	EDI
   199 00000112 C3                              		RET
   200 00000113                                 mts_fin:
   201 00000113 89 13                           		MOV		[EBX],EDX
   202 00000115 5B                              		POP		EBX
   203 00000116 5E                              		POP		ESI
   204 00000117 5F                              		POP		EDI
   205 00000118 C3                              		RET
